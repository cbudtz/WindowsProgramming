<UserControl x:Class="Area51.SoftwareModeler.Views.ClassUserControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
             xmlns:cmd="clr-namespace:GalaSoft.MvvmLight.Command;assembly=GalaSoft.MvvmLight.Platform"
             xmlns:local="clr-namespace:Area51.SoftwareModeler.Views"
             xmlns:models="clr-namespace:Area51.SoftwareModeler.Models;assembly=SoftwareModeler.Model"
             xmlns:helpers="clr-namespace:Area51.SoftwareModeler.Helpers;assembly=SoftwareModeler.Model"
             xmlns:sys="clr-namespace:System;assembly=mscorlib"
             mc:Ignorable="d" 
             Background="Green"             
             d:DesignHeight="300" d:DesignWidth="300"
             d:DataContext="{d:DesignData }">

    <UserControl.Resources>
        <models:VisibilityConverter x:Key="VisibilityConverter"/>
        <ObjectDataProvider x:Key="VisibilityEnum"
                MethodName="GetDescriptions" 
                ObjectType="{x:Type helpers:HelperFunctions}">

            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="models:Visibility" />
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>


    </UserControl.Resources>
    <Canvas Name="CanvasTest" ZIndex="2" Background="Red">
        <!--<Grid   Width="{Binding Width}" Height="{Binding Height}" Background="Blue">-->
        <Grid Name="GridTest" ZIndex="3" Width="{Binding Width}" Canvas.Left="{Binding X}" Canvas.Top="{Binding Y}" Height="{Binding Height}" Background="Blue">
            <!--<Grid Background="Blue">-->
            <Border Name="borderName" Background="LightGray" CornerRadius="6" BorderThickness="2,2,5,5">
                <Border.Style>
                    <Style TargetType="{x:Type Border}">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding IsSelected}" Value="True">
                                <Setter Property="BorderBrush" Value="Red"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding IsSelected}" Value="False">
                                <Setter Property="BorderBrush" Value="Gray"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Border.Style>
                <Grid Margin="5,5,5,5" ScrollViewer.HorizontalScrollBarVisibility="Disabled">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>

                    <Grid Grid.Row="0">
                        <Grid.RowDefinitions>
                            <RowDefinition/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <TextBlock Grid.Row="0" Text="{Binding StereoType}" HorizontalAlignment="Stretch" TextAlignment="Center"/>

                        <TextBlock Grid.Row="1" Text="{Binding Name}" HorizontalAlignment="Stretch" TextAlignment="Center">
                            <TextBlock.Style>

                                <Style TargetType="{x:Type TextBlock}">

                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding IsAbstract}" Value="True">
                                            <Setter Property="FontStyle" Value="Italic"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>

                        <!--<i:Interaction.Triggers>
                    
                    <local:EventTriggerWithoutPropagation EventName="MouseDown" >
                        <cmd:EventToCommand Command="{Binding DataContext.MouseDownCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" PassEventArgsToCommand="True"/>
                    </local:EventTriggerWithoutPropagation>
                    <local:EventTriggerWithoutPropagation EventName="MouseUp">
                        <cmd:EventToCommand Command="{Binding DataContext.MouseUpCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" PassEventArgsToCommand="True"/>
                    </local:EventTriggerWithoutPropagation>

                </i:Interaction.Triggers>-->
                    </Grid>
                    <!--<ListView 
                Grid.Row="1"
                ItemsSource="{Binding Attributes}"/>
            <ListView 
                Grid.Row="2"
                ItemsSource="{Binding Methods}"/>-->
                    <DataGrid 
                Grid.Row="2" 
                IsSynchronizedWithCurrentItem="True"
                ItemsSource="{Binding Attributes}" 
                AutoGenerateColumns="False" 
                BorderThickness="0" 
                HeadersVisibility="None" 
                GridLinesVisibility="None"
                CanUserAddRows="False">

                        <DataGrid.Columns>
                            <DataGridComboBoxColumn 
                        ItemsSource="{Binding Source={StaticResource VisibilityEnum}, Mode=OneWay}"
                        SelectedItemBinding="{Binding Path= Visibility, 
                                                Mode=TwoWay,
                                                UpdateSourceTrigger=PropertyChanged, 
                                                Converter={StaticResource VisibilityConverter}}" 
                        />

                            <DataGridTextColumn Width="4*" Binding="{Binding Name, UpdateSourceTrigger=LostFocus}" />
                            <DataGridTextColumn Width="4*" Binding="{Binding Type, UpdateSourceTrigger=LostFocus}" />
                        </DataGrid.Columns>
                    </DataGrid>

                    <Rectangle Grid.Row="3" Width="Auto" Height="2" StrokeThickness="1" Stroke="Black"/>
                    <DataGrid 
                Grid.Row="4" 
                CanUserAddRows="False"
                ItemsSource="{Binding Methods}" 
                AutoGenerateColumns="False" 
                BorderThickness="0" 
                HeadersVisibility="None" 
                GridLinesVisibility="None" >


                        <DataGrid.Columns>
                            <DataGridComboBoxColumn 
                        ItemsSource="{Binding Source={StaticResource VisibilityEnum}, Mode=OneWay}"
                        SelectedItemBinding="{Binding Path= Visibility, 
                                                Mode=TwoWay,
                                                UpdateSourceTrigger=PropertyChanged, 
                                                Converter={StaticResource VisibilityConverter}}" 
                        />

                            <DataGridTextColumn Width="3*" Binding="{Binding Name, UpdateSourceTrigger=LostFocus}" />
                            <DataGridTextColumn Width="3*" Binding="{Binding Parameters, UpdateSourceTrigger=LostFocus}" />
                            <DataGridTextColumn Width="3*" Binding="{Binding ReturnType, UpdateSourceTrigger=LostFocus}" />
                        </DataGrid.Columns>
                    </DataGrid>
                </Grid>
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="MouseDown" >
                        <cmd:EventToCommand Command="{Binding DataContext.MouseDownClassCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" PassEventArgsToCommand="True"/>
                    </i:EventTrigger>
                    <i:EventTrigger EventName="MouseUp" >
                        <cmd:EventToCommand Command="{Binding DataContext.MouseUpClassCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" PassEventArgsToCommand="True"/>
                    </i:EventTrigger>
                    <i:EventTrigger EventName="MouseMove" >
                        <cmd:EventToCommand Command="{Binding DataContext.MouseMoveClassCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" PassEventArgsToCommand="True"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </Border>
        </Grid>
    </Canvas>
</UserControl>
